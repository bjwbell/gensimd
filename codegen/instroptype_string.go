// generated by stringer -type=InstrOpType,InstructionType,XmmData codegen; DO NOT EDIT

package codegen

import "fmt"

const _InstrOpType_name = "INVALID_OPINTEGER_OPXMM_OP"

var _InstrOpType_index = [...]uint8{0, 10, 20, 26}

func (i InstrOpType) String() string {
	if i < 0 || i >= InstrOpType(len(_InstrOpType_index)-1) {
		return fmt.Sprintf("InstrOpType(%d)", i)
	}
	return _InstrOpType_name[_InstrOpType_index[i]:_InstrOpType_index[i+1]]
}

const _InstructionType_name = "I_ADDI_ANDI_CMPI_CVT_FLOAT2INTI_CVT_INT2FLOATI_CVT_FLOAT2FLOATI_DIVI_IMULI_IDIVI_LEAI_MOVI_MOVBSXI_MOVWSXI_MOVLSXI_MOVBZXI_MOVWZXI_MOVLZXI_MULI_ORI_PADDI_PANDI_PANDNI_PCMPEQI_PCMPGTI_PIMULI_PMULI_PORI_PSLLI_PSRAI_PSRLI_PSUBI_PXORI_PMOVI_SALI_SARI_SHLI_SHRI_SUBI_XOR"

var _InstructionType_index = [...]uint16{0, 5, 10, 15, 30, 45, 62, 67, 73, 79, 84, 89, 97, 105, 113, 121, 129, 137, 142, 146, 152, 158, 165, 173, 181, 188, 194, 199, 205, 211, 217, 223, 229, 235, 240, 245, 250, 255, 260, 265}

func (i InstructionType) String() string {
	if i < 0 || i >= InstructionType(len(_InstructionType_index)-1) {
		return fmt.Sprintf("InstructionType(%d)", i)
	}
	return _InstructionType_name[_InstructionType_index[i]:_InstructionType_index[i+1]]
}

const _XmmData_name = "XMM_INVALIDXMM_F32XMM_F64XMM_4X_F32XMM_2X_F64"

var _XmmData_index = [...]uint8{0, 11, 18, 25, 35, 45}

func (i XmmData) String() string {
	if i < 0 || i >= XmmData(len(_XmmData_index)-1) {
		return fmt.Sprintf("XmmData(%d)", i)
	}
	return _XmmData_name[_XmmData_index[i]:_XmmData_index[i+1]]
}
